(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["sf-colorpicker"],{

/***/ "./bundles/sf-colorpicker.js":
/*!***********************************!*\
  !*** ./bundles/sf-colorpicker.js ***!
  \***********************************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_sf_colorpicker_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/sf-colorpicker.js */ "./modules/sf-colorpicker.js");
/* harmony import */ var _modules_sf_colorpicker_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modules_sf_colorpicker_js__WEBPACK_IMPORTED_MODULE_0__);


/***/ }),

/***/ "./modules/sf-colorpicker.js":
/*!***********************************!*\
  !*** ./modules/sf-colorpicker.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

window.sfBlazor = window.sfBlazor || {};

window.sfBlazor.ColorPicker = function () {
  'use strict';

  var HSV_CONTAINER = '.e-hsv-container';
  var COLOR_PICKER = '.e-split-colorpicker';
  var COLOR_PALETTE = 'e-color-palette';
  var PALETTE = '.e-palette';
  var HSV_COLOR = '.e-hsv-color';
  var SET_OFFSET = 'SetOffset';
  var DROPDOWN_BTN = '.e-dropdown-btn';
  var HANDLER = '.e-handler';
  var MODEL = '.e-colorpicker.e-modal';
  var EMPTY = '';
  var CONTAINER = '.e-container';
  var INPUTS = '.e-selected-value';
  var CONTROL_BTN = '.e-switch-ctrl-btn';
  var PIXEL = 'px';
  var SCROLL = 'scroll';
  var DEFAULT = '100%';
  var PALETTES = 'e-palette';
  var TILE = "e-tile";
  var SELECT = 'e-selected';
  var CLICK = 'Click';
  var CLOSE = 'Close';
  /**
   * Client side scripts for Blazor color picker
   */

  var SfColorPicker =
  /** @class */
  function () {
    function SfColorPicker(dataId, element, dotnetRef, inline) {
      this.dataId = dataId;
      this.element = element;
      this.dotnetRef = dotnetRef;
      window.sfBlazor.setCompInstance(this);

      if (inline) {
        this.addScrollEvents(true);
        this.setPaletteWidth(this.element.querySelector(CONTAINER), false);
      }
    }

    SfColorPicker.prototype.getOffset = function (element) {
      var colorPicker = element.querySelector(HSV_CONTAINER);

      if (!colorPicker) {
        return {
          IsDevice: sf.base.Browser.isDevice
        };
      }

      var offset = colorPicker.getBoundingClientRect();
      var color = colorPicker.querySelector(HSV_COLOR);
      var handler = colorPicker.querySelector(HANDLER);

      if (handler) {
        handler.focus();
      }

      return {
        Left: offset.left,
        Top: offset.top,
        Width: offset.width,
        Height: offset.height,
        Right: offset.right,
        ClientLeft: color.offsetLeft,
        ClientTop: color.offsetTop,
        ClientWidth: color.offsetWidth,
        ClientHeight: color.offsetHeight,
        IsDevice: sf.base.Browser.isDevice
      };
    };

    SfColorPicker.prototype.setOffset = function (element, zIndex) {
      var offset = this.getOffset(element);

      if (zIndex && !sf.base.Browser.isDevice) {
        this.setZIndex(this.element, zIndex, COLOR_PICKER);
        this.setZIndex(this.element, zIndex, DROPDOWN_BTN);
      }

      if (offset) {
        this.dotnetRef.invokeMethodAsync(SET_OFFSET, offset);
      }
    };

    SfColorPicker.prototype.setZIndex = function (element, zIndex, cls) {
      var btnEle = element.querySelector(cls);

      if (btnEle) {
        btnEle.style.zIndex = zIndex + 1 + EMPTY;
      }
    };

    SfColorPicker.prototype.removeZIndex = function () {
      var cls = COLOR_PICKER;
      var btncls = DROPDOWN_BTN;
      var Ele = this.element.querySelector(cls);
      var btnEle = this.element.querySelector(btncls);

      if (Ele) {
        Ele.style.zIndex = EMPTY;
      }

      if (btnEle) {
        btnEle.style.zIndex = EMPTY;
      }
    };

    SfColorPicker.prototype.setPaletteWidth = function (container, modeSwitch, zIndex) {
      if (sf.base.Browser.isDevice && !sf.base.isNullOrUndefined(zIndex)) {
        var model = container.querySelector(MODEL);

        if (model) {
          model.style.zIndex = zIndex - 1 + EMPTY;
          document.body.insertBefore(model, container.parentElement);
          model.style.display = EMPTY;
        }
      }

      if (container.querySelector(HSV_CONTAINER)) {
        container.style.width = EMPTY;
      } else {
        var width = parseInt(getComputedStyle(container).borderBottomWidth, 10);
        container.style.width = container.children[0].offsetWidth + width + width + PIXEL;
        var containers = container.querySelector(INPUTS);

        if (containers) {
          containers.style.width = DEFAULT;
          containers = container.querySelector(CONTROL_BTN);

          if (containers) {
            containers.style.width = DEFAULT;
          }
        }
      }

      if (modeSwitch) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var instance = window.sfBlazor.getCompInstance(this.dataId);

        if (!sf.base.isNullOrUndefined(instance)) {
          instance.setPosition(true);
        }
      }
    };

    SfColorPicker.prototype.scrollHandler = function (e) {
      if (!this.element.parentElement) {
        sf.base.EventHandler.remove(e.target, SCROLL, this.scrollHandler);
        return;
      }

      this.setOffset(this.element);
    };

    SfColorPicker.prototype.addScrollEvents = function (add) {
      var elements = sf.popups.getScrollableParent(this.element);

      for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {
        var element = elements_1[_i];
        add ? sf.base.EventHandler.add(element, SCROLL, this.scrollHandler, this) : sf.base.EventHandler.remove(element, SCROLL, this.scrollHandler);
      }
    };

    SfColorPicker.prototype.focusIn = function (element, inline) {
      if (inline) {
        var container = element.querySelector(CONTAINER);

        if (container) {
          if (container.classList.contains(COLOR_PALETTE)) {
            this.setFocus(PALETTE);
          } else {
            this.setFocus(HANDLER);
          }
        }
      } else {
        this.setFocus(COLOR_PICKER);
      }
    };

    SfColorPicker.prototype.setFocus = function (cls) {
      var btn = this.element.querySelector(cls);

      if (btn) {
        btn.focus();
      }
    };

    SfColorPicker.prototype.paletteKeyDown = function (e, Rtl) {
      var target = e.target;

      if (!target.classList.contains(PALETTES)) {
        return;
      }

      var selectedEle;
      var idx;
      var colorvalue;
      var tiles = [].slice.call(sf.base.selectAll('.' + TILE, target));
      var prevSelectedEle = tiles.filter(function (tile) {
        return tile.classList.contains('e-selected');
      }).pop();
      var container = target.parentElement;

      switch (!e.altKey && e.keyCode) {
        case 39:
          e.preventDefault();
          selectedEle = prevSelectedEle ? tiles[this.tilePosition(tiles, prevSelectedEle, Rtl ? -1 : 1)] : tiles[Rtl ? tiles.length - 1 : 0];
          colorvalue = selectedEle.getAttribute("aria-label");
          this.keySelectionChanges(selectedEle, container, colorvalue);
          break;

        case 37:
          e.preventDefault();
          selectedEle = prevSelectedEle ? tiles[this.tilePosition(tiles, prevSelectedEle, Rtl ? 1 : -1)] : tiles[Rtl ? 0 : tiles.length - 1];
          colorvalue = selectedEle.getAttribute("aria-label");
          this.keySelectionChanges(selectedEle, container, colorvalue);
          break;

        case 38:
          e.preventDefault();
          idx = prevSelectedEle ? this.tilePosition(tiles, prevSelectedEle, -10) : 0;
          selectedEle = tiles[idx] ? tiles[idx] : tiles[idx - 10];
          colorvalue = selectedEle.getAttribute("aria-label");
          this.keySelectionChanges(selectedEle, container, colorvalue);
          break;

        case 40:
          e.preventDefault();
          idx = prevSelectedEle ? this.tilePosition(tiles, prevSelectedEle, 10) : tiles.length - 1;

          if (tiles[idx]) {
            selectedEle = tiles[idx];
          } else {
            idx %= tiles.length;
            idx += tiles[tiles.length - 1].parentElement.childElementCount;
            selectedEle = tiles[idx];
          }

          colorvalue = selectedEle.getAttribute("aria-label");
          this.keySelectionChanges(selectedEle, container, colorvalue);
          break;

        case 13:
          e.preventDefault();

          if (prevSelectedEle) {
            var cValue = prevSelectedEle.getAttribute('aria-label');
            this.dotnetRef.invokeMethodAsync(CLOSE);
          }

      }
    };

    SfColorPicker.prototype.tilePosition = function (items, element, cIdx) {
      items = Array.prototype.slice.call(items);
      var n = items.length;
      var emptyCount = 10 - items[n - 1].parentElement.childElementCount;
      var idx = items.indexOf(element);
      idx += cIdx;

      if (idx < 0) {
        idx += n + emptyCount;
      } else {
        idx %= n + emptyCount;
      }

      return idx;
    };

    SfColorPicker.prototype.keySelectionChanges = function (newEle, container, colorvalue) {
      this.removeTileSelection(container);
      this.addTileSelection(newEle);
      this.dotnetRef.invokeMethodAsync(CLICK, colorvalue);
    };

    SfColorPicker.prototype.removeTileSelection = function (container) {
      var selectedEle = [].slice.call(sf.base.selectAll('.' + SELECT, container.children[0]));
      selectedEle.forEach(function (ele) {
        ele.classList.remove(SELECT);
        ele.setAttribute('aria-selected', 'false');
      });
    };

    SfColorPicker.prototype.addTileSelection = function (ele) {
      ele.classList.add(SELECT);
      ele.setAttribute('aria-selected', 'true');
    };

    return SfColorPicker;
  }(); // eslint-disable-next-line @typescript-eslint/naming-convention, no-underscore-dangle, id-blacklist, id-match


  var ColorPicker = {
    initialize: function initialize(dataId, element, dotnetRef, inline) {
      if (!sf.base.isNullOrUndefined(element)) {
        new SfColorPicker(dataId, element, dotnetRef, inline);
        var instance = window.sfBlazor.getCompInstance(dataId);
        return instance.getOffset(element);
      }

      return null;
    },
    getOffset: function getOffset(dataId, container) {
      var instance = window.sfBlazor.getCompInstance(dataId);

      if (!sf.base.isNullOrUndefined(instance)) {
        instance.setPaletteWidth(container, true);
        return instance.getOffset(container);
      }

      return null;
    },
    focusIn: function focusIn(dataId, element, inline) {
      var instance = window.sfBlazor.getCompInstance(dataId);

      if (!sf.base.isNullOrUndefined(instance)) {
        instance.focusIn(element, inline);
      }
    },
    destroy: function destroy(dataId) {
      var instance = window.sfBlazor.getCompInstance(dataId);

      if (!sf.base.isNullOrUndefined(instance)) {
        instance.addScrollEvents(false);
      }
    }
  };
  return ColorPicker;
}();

/***/ })

}]);(async()=>{await import("/_content/Syncfusion.Blazor/scripts/syncfusion-blazor-base.min.js").then(()=>{sfBlazor.loadDependencies('sfcolorpicker');})})();