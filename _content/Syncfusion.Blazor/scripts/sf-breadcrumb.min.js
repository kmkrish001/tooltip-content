(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["sf-breadcrumb"],{

/***/ "./bundles/sf-breadcrumb.js":
/*!**********************************!*\
  !*** ./bundles/sf-breadcrumb.js ***!
  \**********************************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_sf_breadcrumb_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/sf-breadcrumb.js */ "./modules/sf-breadcrumb.js");
/* harmony import */ var _modules_sf_breadcrumb_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modules_sf_breadcrumb_js__WEBPACK_IMPORTED_MODULE_0__);


/***/ }),

/***/ "./modules/sf-breadcrumb.js":
/*!**********************************!*\
  !*** ./modules/sf-breadcrumb.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

window.sfBlazor = window.sfBlazor || {};

window.sfBlazor.Breadcrumb = function () {
  'use strict';
  /**
   * Client side scripts for Blazor Breadcrumb
   */

  var SfBreadcrumb =
  /** @class */
  function () {
    function SfBreadcrumb(dataId, element, dotnetRef, overflowMode, maxItems, popup, menu) {
      this.dataId = dataId;
      this.element = element;
      this.menu = menu;
      this.popup = popup;
      this.overflowMode = overflowMode;
      this.maxItems = maxItems;
      this.dotnetRef = dotnetRef;
      window.sfBlazor.setCompInstance(this);
      this.calculateMaxItems();
      this.wireEvents();
    }

    SfBreadcrumb.prototype.calculateMaxItems = function () {
      this.prevWidth = this.element.offsetWidth;

      if (this.overflowMode === 'Default' || this.overflowMode === 'Collapsed' || this.overflowMode === 'Menu') {
        var maxItems = -1;
        var width = this.element.offsetWidth;
        var liElems = [].slice.call(this.element.children[0].children).reverse();
        var liWidth = this.overflowMode === 'Menu' ? 0 : liElems[liElems.length - 1].offsetWidth + (liElems[liElems.length - 2] ? liElems[liElems.length - 2].offsetWidth : 0);

        if (this.overflowMode === 'Menu') {
          var menuEle = this.getMenuElement();
          this.element.append(menuEle);
          liWidth += menuEle.offsetWidth;
          menuEle.remove();
        }

        for (var i = 0; i < liElems.length - 2; i++) {
          if (liWidth > width) {
            maxItems = Math.ceil((i - 1) / 2) + (this.overflowMode === 'Menu' && i <= 2 ? 0 : 1);
            break;
          } else {
            if (this.overflowMode === 'Menu' && i === 2) {
              liWidth += liElems[liElems.length - 1].offsetWidth + liElems[liElems.length - 2].offsetWidth;

              if (liWidth > width) {
                maxItems = 1;
                break;
              }
            }

            if (!(this.overflowMode === 'Menu' && liElems[i].classList.contains('e-breadcrumb-menu'))) {
              liWidth += liElems[i].offsetWidth;

              if (liWidth > width) {
                maxItems = Math.ceil(i / 2) + (this.overflowMode === 'Menu' && i <= 2 ? 0 : 1);
                break;
              }
            }
          }
        }

        this.dotnetRef.invokeMethodAsync('ChangeMaxItems', maxItems);
      } else if ((this.overflowMode === 'Wrap' || this.overflowMode === 'Scroll') && this.maxItems > 0) {
        var width = 0;
        var liElems = this.element.querySelectorAll('.e-breadcrumb-item,.e-breadcrumb-separator');

        if (liElems.length > this.maxItems + this.maxItems - 1) {
          for (var i = this.overflowMode === 'Wrap' ? 1 : 0; i < this.maxItems + this.maxItems - 1; i++) {
            width += liElems[i].offsetWidth;
          }

          width = width + 5 + parseInt(getComputedStyle(this.element.children[0]).paddingLeft, 10) * 2;

          if (this.overflowMode === 'Wrap') {
            this.element.querySelector('.e-breadcrumb-wrapped-ol').style.width = width + 'px';
          } else {
            this.element.style.width = width + 'px';
          }
        }
      }
    };

    SfBreadcrumb.prototype.resize = function () {
      if (this.prevWidth != this.element.offsetWidth) {
        this.dotnetRef.invokeMethodAsync('ResizeHandler');
      }
    };

    SfBreadcrumb.prototype.getMenuElement = function () {
      return sf.base.createElement('li', {
        className: 'e-icons e-breadcrumb-menu'
      });
    };

    SfBreadcrumb.prototype.openPopup = function (menu, popup) {
      var left;
      var top;
      document.body.appendChild(popup);
      var menuOffset = menu.getBoundingClientRect();
      var popupOffset = popup.getBoundingClientRect();
      left = menuOffset.left + pageXOffset;
      top = menuOffset.bottom + pageYOffset;

      if (menuOffset.bottom + popupOffset.height > document.documentElement.clientHeight) {
        if (top - menuOffset.height - popupOffset.height > document.documentElement.clientTop) {
          top = top - menuOffset.height - popupOffset.height;
        }
      }

      if (menuOffset.left + popupOffset.width > document.documentElement.clientWidth) {
        if (menuOffset.right - popupOffset.width > document.documentElement.clientLeft) {
          left = left + menuOffset.width - popupOffset.width;
        }
      }

      this.addEventListener();
      popup.style.left = Math.ceil(left) + 'px';
      popup.style.top = Math.ceil(top) + 'px';
      popup.style.zIndex = sf.popups.getZindexPartial(this.element) + '';
      popup.style.visibility = '';
      popup.firstElementChild.focus();
    };

    SfBreadcrumb.prototype.addEventListener = function () {
      sf.base.EventHandler.add(document, 'mousedown', this.mousedownHandler, this);

      if (this.popup) {
        sf.base.EventHandler.add(this.popup, 'keydown', this.popupKeyDownHandler, this);
      }
    };

    SfBreadcrumb.prototype.popupKeyDownHandler = function (e) {
      if (e.key === 'Escape') {
        this.dotnetRef.invokeMethodAsync('ClosePopup', null);
      }
    };

    SfBreadcrumb.prototype.mousedownHandler = function (e) {
      if (this.popup && this.popup.parentElement) {
        var target = e.target;

        if (!sf.base.closest(target, '#' + this.menu.id) && !sf.base.closest(e.target, '#' + this.popup.id)) {
          this.dotnetRef.invokeMethodAsync('ClosePopup', null);
          this.removeEventListener();
        }
      } else {
        this.removeEventListener();
      }
    };

    SfBreadcrumb.prototype.removeEventListener = function () {
      sf.base.EventHandler.remove(document, 'mousedown', this.mousedownHandler);

      if (this.popup) {
        sf.base.EventHandler.remove(this.popup, 'keydown', this.popupKeyDownHandler);
      }
    };

    SfBreadcrumb.prototype.wireEvents = function () {
      window.addEventListener('resize', this.resize.bind(this));
    };

    SfBreadcrumb.prototype.unWireEvents = function () {
      window.removeEventListener('resize', this.resize.bind(this));
    };

    SfBreadcrumb.prototype.destroy = function () {
      this.unWireEvents();
    };

    return SfBreadcrumb;
  }();

  var Breadcrumb = {
    initialize: function initialize(dataId, element, dotnetRef, overflowMode, maxItems) {
      if (element) {
        new SfBreadcrumb(dataId, element, dotnetRef, overflowMode, maxItems);
      }
    },
    calculateMaxItems: function calculateMaxItems(dataId, overflowMode) {
      var instance = window.sfBlazor.getCompInstance(dataId);

      if (!sf.base.isNullOrUndefined(instance)) {
        instance.overflowMode = overflowMode;
        instance.calculateMaxItems();
      }
    },
    openPopup: function openPopup(dataId, menu, popup) {
      var instance = window.sfBlazor.getCompInstance(dataId);

      if (!sf.base.isNullOrUndefined(instance)) {
        instance.popup = popup;
        instance.menu = menu;
        instance.openPopup(menu, popup);
      }
    },
    destroy: function destroy(dataId) {
      var instance = window.sfBlazor.getCompInstance(dataId);

      if (!sf.base.isNullOrUndefined(instance)) {
        instance.destroy();
      }
    }
  };
  return Breadcrumb;
}();

/***/ })

}]);(async()=>{await import("/_content/Syncfusion.Blazor/scripts/syncfusion-blazor-base.min.js").then(()=>{sfBlazor.loadDependencies('sfbreadcrumb');})})();