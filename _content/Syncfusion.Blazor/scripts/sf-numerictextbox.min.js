(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["sf-numerictextbox"],{

/***/ "./bundles/sf-numerictextbox.js":
/*!**************************************!*\
  !*** ./bundles/sf-numerictextbox.js ***!
  \**************************************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_sf_numerictextbox_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/sf-numerictextbox.js */ "./modules/sf-numerictextbox.js");
/* harmony import */ var _modules_sf_numerictextbox_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modules_sf_numerictextbox_js__WEBPACK_IMPORTED_MODULE_0__);


/***/ }),

/***/ "./modules/sf-numerictextbox.js":
/*!**************************************!*\
  !*** ./modules/sf-numerictextbox.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

window.sfBlazor = window.sfBlazor || {};

window.sfBlazor.NumericTextBox = function () {
  'use strict';
  /**
   * Blazor numeric texbot interop handler
   */

  var INTREGEXP = new RegExp('^(-)?(\\d*)$');
  var ENTER = 13;
  var ARROW_UP = 38;
  var ARROW_DOWN = 40;
  var BACK_SPACE = 8;
  var WHEEL_DELTA = 120;
  var DELTA = 3;
  var LEFT_BUTTON = 0;
  var RIGHT_BUTTON = 3;
  var MOBILE_INTERVEL_TIME = 600;
  var INTERVEL_TIME = 90;
  var TIMEOUT = 150;
  var MOUSE_BUTTON = 2;
  var IE_VERSION = '11.0';
  var INCREMENT = 'increment';
  var DECREMENT = 'decrement';
  var MOUSE_MOVE = 'mouseleave';
  var ROOT = 'e-input-group-icon';
  var MOUSE_UP = 'mouseup';
  var MOUSE_WHEEL = 'mousewheel DOMMouseScroll';
  var SERVER_ACTION = 'ServerAction';
  var SPIN_UP = 'e-spin-up';
  var SPIN_DOWN = 'e-spin-down';
  var FOCUS = 'focus';
  var BLUR = 'blur';
  var KEY_PRESS = 'keypress';
  var KEY_DOWN = 'keydown';
  var PASTE = 'paste';
  var SCROLL = 'scroll';

  var SfNumericTextBox =
  /** @class */
  function () {
    function SfNumericTextBox(wrapperElement, element, dotnetRef, options) {
      this.wrapperElement = wrapperElement;
      this.element = element;
      this.options = options;
      this.element.blazor__instance = this;
      this.dotNetRef = dotnetRef;
    }

    SfNumericTextBox.prototype.initialize = function () {
      this.spinButtonEvents();
      sf.base.EventHandler.add(this.element, FOCUS, this.focusHandler, this);
      sf.base.EventHandler.add(this.element, BLUR, this.focusOutHandler, this);
      sf.base.EventHandler.add(this.element, KEY_PRESS, this.keyPressHandler, this);
      sf.base.EventHandler.add(this.element, KEY_DOWN, this.keyDownHandler, this);
      sf.base.EventHandler.add(this.element, PASTE, this.pasteHandler, this);

      if (sf.base.Browser.isDevice) {
        sf.base.EventHandler.add(document, SCROLL, this.scrollHandler);
      }
    };

    SfNumericTextBox.prototype.keyPressHandler = function (event) {
      if (!this.options.enabled || this.options.readonly) {
        return true;
      }

      var action = event.keyCode;

      if (event.which === LEFT_BUTTON || event.metaKey || event.ctrlKey || action === BACK_SPACE || action === ENTER) {
        return true;
      }

      if (!this.numericRegex().test(this.keyPressHelper(event))) {
        event.preventDefault();
        event.stopPropagation();
        return false;
      } else {
        return true;
      }
    };

    SfNumericTextBox.prototype.pasteHandler = function (event) {
      if (!(!this.options.enabled || this.options.readonly)) {
        var pasteValue = event.clipboardData.getData('text/plain');

        if (!this.numericRegex().test(pasteValue.trim())) {
          event.preventDefault();
        } else {
          this.dotNetRef.invokeMethodAsync('InvokePasteHandler', pasteValue);
        }
      }
    };

    SfNumericTextBox.prototype.preventHandler = function () {
      var _this = this;

      var iOS = !!navigator.platform && /iPad|iPhone|iPod|MacIntel/.test(navigator.platform);
      setTimeout(function () {
        if (_this.element.selectionStart > 0) {
          var currentPos = _this.element.selectionStart;
          var prevPos = _this.element.selectionStart - 1;
          var start = 0;

          var valArray = _this.element.value.split('');

          var decimalSeparator = _this.options.decimalSeparator;
          var ignoreKeyCode = decimalSeparator.charCodeAt(0);

          if (_this.element.value[prevPos] === ' ' && _this.element.selectionStart > 0 && !iOS) {
            if (sf.base.isNullOrUndefined(_this.prevVal)) {
              _this.element.value = _this.element.value.trim();
            } else if (prevPos !== 0) {
              _this.element.value = _this.prevVal;
            } else if (prevPos === 0) {
              _this.element.value = _this.element.value.trim();
            }

            _this.element.setSelectionRange(prevPos, prevPos);
          } else if (isNaN(parseFloat(_this.element.value[_this.element.selectionStart - 1])) && _this.element.value[_this.element.selectionStart - 1].charCodeAt(0) !== 45) {
            if (valArray.indexOf(_this.element.value[_this.element.selectionStart - 1]) !== valArray.lastIndexOf(_this.element.value[_this.element.selectionStart - 1]) && _this.element.value[_this.element.selectionStart - 1].charCodeAt(0) === ignoreKeyCode || _this.element.value[_this.element.selectionStart - 1].charCodeAt(0) !== ignoreKeyCode) {
              _this.element.value = _this.element.value.substring(0, prevPos) + _this.element.value.substring(currentPos, _this.element.value.length);

              _this.element.setSelectionRange(prevPos, prevPos);

              if (isNaN(parseFloat(_this.element.value[_this.element.selectionStart - 1])) && _this.element.selectionStart > 0 && _this.element.value.length) {
                _this.preventHandler();
              }
            }
          } else if (isNaN(parseFloat(_this.element.value[_this.element.selectionStart - 2])) && _this.element.selectionStart > 1 && _this.element.value[_this.element.selectionStart - 2].charCodeAt(0) !== 45) {
            if (valArray.indexOf(_this.element.value[_this.element.selectionStart - 2]) !== valArray.lastIndexOf(_this.element.value[_this.element.selectionStart - 2]) && _this.element.value[_this.element.selectionStart - 2].charCodeAt(0) === ignoreKeyCode || _this.element.value[_this.element.selectionStart - 2].charCodeAt(0) !== ignoreKeyCode) {
              _this.element.setSelectionRange(prevPos, prevPos);

              _this.nextEle = _this.element.value[_this.element.selectionStart];
              _this.cursorPosChanged = true;

              _this.preventHandler();
            }
          }

          if (_this.cursorPosChanged === true && _this.element.value[_this.element.selectionStart] === _this.nextEle && isNaN(parseFloat(_this.element.value[_this.element.selectionStart - 1]))) {
            _this.element.setSelectionRange(_this.element.selectionStart + 1, _this.element.selectionStart + 1);

            _this.cursorPosChanged = false;
            _this.nextEle = null;
          }

          if (_this.element.value.trim() === '') {
            _this.element.setSelectionRange(start, start);
          }

          if (_this.element.selectionStart > 0) {
            if (_this.element.value[_this.element.selectionStart - 1].charCodeAt(0) === 45 && _this.element.selectionStart > 1) {
              if (sf.base.isNullOrUndefined(_this.prevVal)) {
                // eslint-disable-next-line no-self-assign
                _this.element.value = _this.element.value;
              } else {
                _this.element.value = _this.prevVal;
              }

              _this.element.setSelectionRange(_this.element.selectionStart, _this.element.selectionStart);
            }
          }

          _this.prevVal = _this.element.value;
        }
      });
    };

    SfNumericTextBox.prototype.keyDownHandler = function (event) {
      var iOS = !!navigator.platform && /iPad|iPhone|iPod|MacIntel/.test(navigator.platform);

      if (!this.options.readonly) {
        if (sf.base.Browser.isDevice && !(event.keyCode === ARROW_UP || event.keyCode === ARROW_DOWN) && !(event.keyCode === BACK_SPACE)) {
          if (!this.numericRegex().test(this.keyPressHelper(event))) {
            if (iOS && sf.base.Browser.isDevice) {
              this.preventHandler();
            } else {
              event.preventDefault();
            }
          }
        }

        if (!iOS && sf.base.Browser.isDevice) {
          this.preventHandler();
        }

        if (event.keyCode === ARROW_UP) {
          event.preventDefault();
          this.dotNetRef.invokeMethodAsync(SERVER_ACTION, INCREMENT, event, this.element.value);
        } else if (event.keyCode === ARROW_DOWN) {
          event.preventDefault();
          this.dotNetRef.invokeMethodAsync(SERVER_ACTION, DECREMENT, event, this.element.value);
        }
      }
    };

    SfNumericTextBox.prototype.keyPressHelper = function (event) {
      return this.element.value.substring(0, this.element.selectionStart) + String.fromCharCode(event.which) + this.element.value.substring(this.element.selectionEnd);
    };

    SfNumericTextBox.prototype.numericRegex = function () {
      var decimalSeparator = this.options.decimalSeparator;
      var fractionRule = '*';

      if (decimalSeparator === '.') {
        decimalSeparator = '\\' + decimalSeparator;
      }

      if (this.options.decimals === 0 && this.options.validateDecimalOnType) {
        return INTREGEXP;
      }

      if (this.options.decimals && this.options.validateDecimalOnType) {
        fractionRule = '{0,' + this.options.decimals + '}';
      }

      return new RegExp('^(-)?(((\\d+(' + decimalSeparator + '\\d' + fractionRule + ')?)|(' + decimalSeparator + '\\d' + fractionRule + ')))?$');
    };

    SfNumericTextBox.prototype.mouseWheel = function (event) {
      event.preventDefault();
      var delta; // tslint:disable-next-line

      var rawEvent = event;

      if (rawEvent.wheelDelta) {
        delta = rawEvent.wheelDelta / WHEEL_DELTA;
      } else if (rawEvent.detail) {
        delta = -rawEvent.detail / DELTA;
      }

      if (delta > 0) {
        this.dotNetRef.invokeMethodAsync(SERVER_ACTION, INCREMENT, event, this.element.value);
      } else if (delta < 0) {
        this.dotNetRef.invokeMethodAsync(SERVER_ACTION, DECREMENT, event, this.element.value);
      }
    };

    SfNumericTextBox.prototype.focusHandler = function (event) {
      this.isFocused = true;

      if (!(!this.options.enabled || this.options.readonly)) {
        if (!sf.base.Browser.isDevice) {
          sf.base.EventHandler.add(this.element, MOUSE_WHEEL, this.mouseWheel, this);
        }
      }
    };

    SfNumericTextBox.prototype.focusOutHandler = function (event) {
      this.isFocused = false;
      event.preventDefault();

      if (!sf.base.Browser.isDevice) {
        sf.base.EventHandler.remove(this.element, MOUSE_WHEEL, this.mouseWheel);
      }
    };

    SfNumericTextBox.prototype.mouseDownOnSpinner = function (event) {
      var _this = this;

      if (this.options.enabled && !this.options.readonly) {
        if (this.isFocused) {
          this.isPrevFocused = true;
          event.preventDefault();
        }

        var target = event.currentTarget;
        var action_1 = target.classList.contains(SPIN_UP) ? INCREMENT : DECREMENT;
        sf.base.EventHandler.add(target, MOUSE_MOVE, this.mouseUpClick, this); // tslint:disable

        this.timeOut = setInterval(function () {
          _this.isCalled = true;

          _this.dotNetRef.invokeMethodAsync(SERVER_ACTION, action_1, event, _this.element.value);
        }, TIMEOUT);
        sf.base.EventHandler.add(document, MOUSE_UP, this.mouseUpClick, this);
      }
    };

    SfNumericTextBox.prototype.mouseUpOnSpinner = function (event) {
      if (this.options.enabled && !this.options.readonly) {
        if (this.isPrevFocused) {
          this.element.focus();

          if (!sf.base.Browser.isDevice) {
            this.isPrevFocused = false;
          }
        }

        if (!sf.base.Browser.isDevice) {
          event.preventDefault();
        }

        if (!this.getElementData(event)) {
          return;
        }

        var target = event.currentTarget;
        var action = target.classList.contains(SPIN_UP) ? INCREMENT : DECREMENT;
        sf.base.EventHandler.remove(target, MOUSE_MOVE, this.mouseUpClick);

        if (!this.isCalled) {
          this.dotNetRef.invokeMethodAsync(SERVER_ACTION, action, event, this.element.value);
        }

        this.isCalled = false;
        sf.base.EventHandler.remove(document, MOUSE_UP, this.mouseUpClick);
      }
    };

    SfNumericTextBox.prototype.touchMoveOnSpinner = function (event) {
      if (!this.options.enabled || this.options.readonly) {
        var target = document.elementFromPoint(event.clientX, event.clientY);

        if (!target.classList.contains(ROOT)) {
          clearInterval(this.timeOut);
        }
      } else {
        clearInterval(this.timeOut);
      }
    };

    SfNumericTextBox.prototype.scrollHandler = function (event) {
      clearInterval(this.timeOut);
    };

    SfNumericTextBox.prototype.getElementData = function (event) {
      if (event.which && event.which === RIGHT_BUTTON || event.button && event.button === MOUSE_BUTTON || !this.options.enabled || this.options.readonly) {
        return false;
      }

      clearInterval(this.timeOut);
      return true;
    };

    SfNumericTextBox.prototype.mouseUpClick = function (event) {
      event.stopPropagation();
      clearInterval(this.timeOut);
      this.isCalled = false;
      sf.base.EventHandler.remove(this.spinUp, MOUSE_MOVE, this.mouseUpClick);
      sf.base.EventHandler.remove(this.spinDown, MOUSE_MOVE, this.mouseUpClick);
    };

    SfNumericTextBox.prototype.selectRange = function (formatValue) {
      var _this = this;

      if (!sf.base.Browser.isDevice && sf.base.Browser.info.version === IE_VERSION) {
        this.element.setSelectionRange(0, formatValue.length);
      } else {
        var delay = sf.base.Browser.isDevice && sf.base.Browser.isIos ? MOBILE_INTERVEL_TIME : INTERVEL_TIME;
        setTimeout(function () {
          _this.element.setSelectionRange(0, formatValue.length);
        }, delay);
      }
    };

    SfNumericTextBox.prototype.isDevice = function () {
      return sf.base.Browser.isDevice;
    };

    SfNumericTextBox.prototype.spinButtonEvents = function () {
      this.spinDown = this.wrapperElement ? this.wrapperElement.querySelector('.' + SPIN_DOWN) : null;
      this.spinUp = this.wrapperElement ? this.wrapperElement.querySelector('.' + SPIN_UP) : null;

      if (this.spinDown && this.spinUp) {
        this.unBindSpinButton();
        this.bindSpinButton();
      }
    };

    SfNumericTextBox.prototype.bindSpinButton = function () {
      sf.base.EventHandler.add(this.spinUp, sf.base.Browser.touchStartEvent, this.mouseDownOnSpinner, this);
      sf.base.EventHandler.add(this.spinDown, sf.base.Browser.touchStartEvent, this.mouseDownOnSpinner, this);
      sf.base.EventHandler.add(this.spinUp, sf.base.Browser.touchEndEvent, this.mouseUpOnSpinner, this);
      sf.base.EventHandler.add(this.spinDown, sf.base.Browser.touchEndEvent, this.mouseUpOnSpinner, this);
      sf.base.EventHandler.add(this.spinUp, sf.base.Browser.touchMoveEvent, this.touchMoveOnSpinner, this);
      sf.base.EventHandler.add(this.spinDown, sf.base.Browser.touchMoveEvent, this.touchMoveOnSpinner, this);
    };

    SfNumericTextBox.prototype.unBindSpinButton = function () {
      sf.base.EventHandler.remove(this.spinUp, sf.base.Browser.touchStartEvent, this.mouseDownOnSpinner);
      sf.base.EventHandler.remove(this.spinDown, sf.base.Browser.touchStartEvent, this.mouseDownOnSpinner);
      sf.base.EventHandler.remove(this.spinUp, sf.base.Browser.touchEndEvent, this.mouseUpOnSpinner);
      sf.base.EventHandler.remove(this.spinDown, sf.base.Browser.touchEndEvent, this.mouseUpOnSpinner);
      sf.base.EventHandler.remove(this.spinUp, sf.base.Browser.touchMoveEvent, this.touchMoveOnSpinner);
      sf.base.EventHandler.remove(this.spinDown, sf.base.Browser.touchMoveEvent, this.touchMoveOnSpinner);
    };

    SfNumericTextBox.prototype.destroy = function () {
      sf.base.EventHandler.remove(this.element, FOCUS, this.focusHandler);
      sf.base.EventHandler.remove(this.element, BLUR, this.focusOutHandler);
      sf.base.EventHandler.remove(this.element, KEY_PRESS, this.keyPressHandler);
      sf.base.EventHandler.remove(this.element, KEY_DOWN, this.keyDownHandler);
      sf.base.EventHandler.remove(this.element, PASTE, this.pasteHandler);

      if (sf.base.Browser.isDevice) {
        sf.base.EventHandler.remove(document, SCROLL, this.scrollHandler);
      }
    };

    return SfNumericTextBox;
  }(); // tslint:disable


  var NumericTextBox = {
    initialize: function initialize(wrapperElement, element, dotnetRef, options) {
      if (element) {
        new SfNumericTextBox(wrapperElement, element, dotnetRef, options);
      }

      if (element && element.blazor__instance) {
        element.blazor__instance.initialize();
      }
    },
    selectRange: function selectRange(inputEle, formatValue) {
      if (inputEle && inputEle.blazor__instance) {
        inputEle.blazor__instance.selectRange(formatValue);
      }
    },
    propertyChanges: function propertyChanges(element, options) {
      if (element && element.blazor__instance) {
        element.blazor__instance.options = options;
      }
    },
    focusIn: function focusIn(inputEle) {
      if (inputEle) {
        inputEle.focus();
      }
    },
    focusOut: function focusOut(inputEle) {
      if (inputEle) {
        inputEle.blur();
      }
    },
    spinButtonEvents: function spinButtonEvents(inputEle) {
      if (inputEle && inputEle.blazor__instance) {
        inputEle.blazor__instance.spinButtonEvents();
      }
    },
    destroy: function destroy(inputEle) {
      if (inputEle && inputEle.blazor__instance) {
        inputEle.blazor__instance.destroy();
      }
    }
  };
  return NumericTextBox;
}();

/***/ })

}]);(async()=>{await import("/_content/Syncfusion.Blazor/scripts/syncfusion-blazor-base.min.js").then(()=>{sfBlazor.loadDependencies('sfnumerictextbox');})})();